((`English` + `Science`) + `Math`) 
The symbol ` is called a backtick in English. It is often used in programming, markdown formatting, or shell scripting. For example:

# MySQL sample data name called sakila, sys, world,

#Select
select * from sakila.actor        # To select the Data.

select actor_id, first_name from sakila.actor     # to want specifice coloumn to a data table.

select * from sakila.actor;
Select actor_id, first_name from sakila.actor;         #Ctrl + Enter	All query executes.        Ctrl + Shift + Enter	To selected query executes.

#Where Clause
select CountryCode,Name,District from world.city where CountryCode = "AFG";        #use like filter

#And , Or , Not Operations
#And
select CountryCode,Name,District from world.city where CountryCode = "AFG" and Name = "kabul";        # Using (AND) to apply multiple filter in a data

#or
select * from world.city where CountryCode = "AFG" or District like "%Holland%";               # Using (or) operator evaluates each condition separately and                                                                                                         returns a row if at least one condition is true.
                                                                                                #Wildcards in LIKE:
                                                                                                  % (Percent Sign): Matches zero or more characters.
                                                                                                  _ (Underscore): Matches a single character.
#Not
select * from world.city where Not CountryCode = "AFG";                                        # Using (Not) to appy coloumns accept your criteria show all data

#Wildcards in LIKE:
# % (Percent Sign): Matches zero or more characters.
# _ (Underscore): Matches a single character.
select * from world.city where District like "Ut_____";
select * from world.city where District like "%Holland%";            # where you can use multiple way to use this 

#Order by
select * from sakila.payment order by amount desc;                    #where you can use asc/desc

#limit
select * from sakila.payment order by amount desc limit 10;          #using limit to find how many rows do you wanted.
select * from sakila.payment order by amount desc limit 2, 10;        # accept 2 coloumns show all data.

#Between operators
select * from sakila.payment where amount Between 5 and 10;           # using Between 

#In And Not in operator
#In
select * from sakila.payment where amount in (8.99,3.99);

#Not
select * from sakila.payment where amount Not in (8.99,3.99);

#Greater than(>), Lower than (<), Equal (=), Not Equal (!=),
select * from sakila.payment where amount < 5;
select * from sakila.payment where amount > 5;
select * from sakila.payment where amount = 5;
select * from sakila.payment where amount != 5;

#Concatenate------------concat()
select concat("address","address 2","district","city_id","postal_code") as full_address from sakila.address

#Concatenate------------concat_ws()
select concat_ws(" - ","address","address 2","district","city_id","postal_code") as full_address from sakila.address

#length of the data
select length (Name) as name_count from city;

#Change the Case to Uppercase
select upper(Name) as Upper_case from city;

#Change the Case to Lowercase
select lower(Name) as Lower_case from city;

#left
select left(Name,2)as two_word_name_left from city;
#right
select right(Name, 2) as two_word_name_right from city;
#mid
select mid(Name, 3) as two_word_name_mid from city;

#Data Aggregation Numeric Function
#sum
select sum(Population) as total_population from world.city;
#count
select count(ID) as count_Id from world.city;
#max
select max(Population) as Max_value from world.city;
#min
select min(Population) as Min_value from world.city;
#truncate
select truncate(amount, 0) as Amounts from sakila.Payment;   #when you have to remove decimal value
#ceil
select ceil(amount) as point_to_increase from sakila.payment;  #when you have to increase the value point to one 0.0>1
#floor
select floor(amount) as floor_ from sakila.payment;

#Data Function
#Date
select date(payment_date) as dates from sakila.payment;      #if data is look like 2005-05-25 11:30:37 that and you want only date
#time
select time(payment_date) as times from sakila.payment;
#different day
select datediff(last_update,payment_date) as diff_day from sakila.payment;     #diff_day
#day
select day(payment_date) as days from sakila.payment;
#day name
select dayname(payment_date) as day_name from sakila.payment;
#month
select month(payment_date) as month from sakila.payment;
#month name
select monthname(payment_date) as month_name from sakila.payment;
#year
select year(payment_date) as years from sakila.payment;
#hours
select hour(payment_date) as hours from sakila.payment;
#minutes
select minute(payment_date) as minutes from sakila.payment;

#Case operators
#case
select payment_id,customer_id,amount,
case
	when amount < 1 then "Less_Amount"
    when amount < 4 then "Avg_Amount"
    else "Great_Amount"
    end as Amounts
from sakila.payment                # when you use criteria for coloumn like IF in Excel

#Group by
select * from sakila.film;
select rating, count(title) as films from sakila.film group by rating;

#Having Clouse
#it an alternative of where clouse if allready use some group by something like in the case use "Having".
#Having
1    select * from sakila.film;
     select rating,count(title) as films from sakila.film group by rating having films >= 150;

2    select * from sakila.film;
    select rating,count(title) as films from sakila.film where rating="PG" group by rating having films >= 150;

#Join
#Inner
#Left
#Right
#Cross

#Inner				#common foreign key Data matched should be come.
	select
	actor_id, 
	full_name, 
	count(title) as count_movie
	from 
	(select film_actor.actor_id, film.title, concat(first_name,"_",last_name) as full_name from film_actor
	inner join film
	on film_actor.film_id = film.film_id
	inner join actor
	on film_actor.actor_id = actor.actor_id)
	as asign_actor
	group by 
	actor_id,full_name;
#Left join			#Left table hole data and right common data.
	select * from actor
	left join film_actor
	on actor.actor_id = film_actor.actor_id;
#right join			#right table hole data and lift common data.
	select * from actor
	right join film_actor
	on actor.actor_id = film_actor.actor_id;
#cross join			#All common and non common data both table.
	select * from actor
	cross join film_actor
	on actor.actor_id = film_actor.actor_id;

#Set operators
#union
	select film_id,title from film
	union
	select film_id,last_update from film_actor
#union all
	select film_id,title from film
	union all
	select film_id,last_update from film_actor

##################################################################
Be Remember learned Intersect, Except,
##################################################################
#Subqueries		#queries inside queries
	select * from sakila.payment where amount >
	(select avg(amount) from sakila.payment);

#IN			#when we use this then we have similar data contain
	select * from film_actor
	where actor_id in (select actor_id from actor)
#NOT IN			#when we use this then we have similar data contain
	select * from film_actor
	where actor_id not in (select actor_id from actor)

#To print columns name in rows
	select column_name
	from information_schema.columns
	where table_name = 'film'

#View			# it's help to create vertual table
	create view actor_movies_nivesh as
	select actor.actor_id, concat(actor.first_name," ",actor.last_name) as actor_name, count(film_actor.film_id) as movies,
	sum(case when film.rating = "PG" then 1 else 0 end) as PG,
	sum(case when film.rating = "G" then 1 else 0 end) as G,
	sum(case when film.rating = "NC-17" then 1 else 0 end) as NC_17,
	sum(case when film.rating = "PG-13" then 1 else 0 end) as PG_13,
	sum(case when film.rating = "R" then 1 else 0 end) as R
	from film_actor
	inner join film
	on film_actor.film_id = film.film_id
	inner join actor
	on film_actor.actor_id = actor.actor_id
	group by actor.actor_id,actor_name

#Stored procedure in MySQL
	CREATE DEFINER=`root`@`localhost` PROCEDURE `nivesh`()
	BEGIN
	select * from sakila.film where film.release_year=2006;
	END

	delimiter &&
	create Procedure niv()
	begin
		select * from sakila.customer;
	end &&
	delimiter ;
	
	call niv()
#Stored procedure in MySQL
#In
	CREATE DEFINER=`root`@`localhost` PROCEDURE `nivesh`(in rental_ int)
	BEGIN
	select * from sakila.film where film.release_year=release_year;
	END
#Out


#InOut


#functions


















